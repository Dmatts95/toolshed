{"version":3,"sources":["logo.svg","Components/stringSubTool.js","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StringSubTool","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","collapse","setState","react_default","a","createElement","Container","className","Button","color","onClick","style","marginBottom","Collapse","isOpen","Card","CardHeader","tag","CardBody","Form","Label","for","Input","type","id","defaultValue","FormGroup","check","Component","AppRouter","BrowserRouter","fluid","Row","noGutters","Col","sm","Nav","vertical","NavItem","NavLink","Link","to","Route","path","exact","component","App","src_AppRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19c32324.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './stringSubTool.css';\r\nimport './utils.css';\r\nimport {Container, Row, Col, Label,Button, Collapse, Card, CardBody, CardHeader, Form, Input, FormGroup} from 'reactstrap'\r\n\r\nclass StringSubTool extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = { collapse: false };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ collapse: !this.state.collapse });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Container className=\"string-sub-tool text-left\">\r\n            <h2 className=\"tool-header\">String Substitution Tool</h2>   \r\n            <Button color=\"primary\" onClick={this.toggle} style={{ marginBottom: '1rem' }}>Help</Button>\r\n            <Collapse isOpen={this.state.collapse} className=\"mb-4\">\r\n                <Card className=\"help-section border\">\r\n                    <CardHeader tag=\"h2\" className=\"color-primary\">How To Use</CardHeader>\r\n                    <CardBody>This is example text will replace later</CardBody>  \r\n                </Card>\r\n            </Collapse>\r\n            <Form>\r\n                <Label for=\"listInput\">List Input</Label>\r\n                <Input type=\"textarea\" id=\"listInput\"></Input>\r\n\r\n                <Label for=\"replaceSting\">String to Substitute</Label>\r\n                <Input type=\"text\" id=\"replaceSting\"></Input>\r\n\r\n                <Label for=\"subSymbol\">Symbol to Substitute</Label>\r\n                <Input type=\"text\" id=\"subSymbol\" defaultValue=\"###\"></Input>\r\n\r\n                <Label for=\"trimString\">Characters to Trim</Label>\r\n                <Input type=\"select\" id=\"trimString\">\r\n                    <option>-1</option>\r\n                    <option>-2</option>\r\n                    <option>-3</option>\r\n                    <option>-4</option>\r\n                </Input>\r\n                <FormGroup check>\r\n                    <Label check>\r\n                        <Input type=\"checkbox\" /> To Lower\r\n                    </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                    <Label check>\r\n                        <Input type=\"checkbox\" /> Output on 1 line\r\n                    </Label>\r\n                </FormGroup>\r\n                <Button className=\"form-button\" color=\"primary\">Submit</Button>\r\n            </Form>\r\n        </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringSubTool;\r\n","import  React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport {Col, Row, Container, Nav, NavItem, NavLink} from \"reactstrap\";\r\nimport StringSubTool from \"./Components/stringSubTool\";\r\nimport \"./Components/sidenav.css\";\r\n\r\n\r\nconst AppRouter = () => (\r\n\t<Router>\r\n\t\t<Container fluid>\r\n\t\t\t<Row noGutters>\r\n\t\t\t\t<Col sm=\"2\" >\r\n\t\t\t\t\t<Nav vertical className=\"sidenav\">\r\n\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t<NavLink>\r\n\t\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t</Nav>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"10\">\r\n\t\t\t\t\t\t<Route path=\"/\" exact component={StringSubTool} />\t\t\t\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n\t</Router>\r\n  \r\n);\r\n\r\nexport default AppRouter;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from 'reactstrap';\nimport AppRouter from './AppRouter';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppRouter/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}