{"version":3,"sources":["components/Home.jsx","components/About.jsx","routing/routeConfig.js","components/StringSubber.jsx","components/HeaderNav.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","About","RoutingInfo","stringSubberInitialState","collapse","toLower","allOneLine","symbolToTrim","templateString","charToTrim","unformattedList","masterList","haveCopied","cslState","useState","appState","setAppState","handleChange","event","target","name","value","checked","delta","type","Container","Row","Col","xs","md","className","Form","Group","controlId","Label","Control","as","onChange","placeholder","Check","label","Button","variant","onClick","e","preventDefault","stringList","split","map","substr","str","replace","RegExp","toLowerCase","parseInt","console","log","laststr","length","slice","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","toWrite","join","navigator","clipboard","writeText","then","r","catch","error","entry","i","spKey","HeaderNav","Navbar","bg","Brand","href","Nav","routes","siteEntry","Link","route","App","Switch","sitemapEntry","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"8NAIeA,MAHF,IACF,gDCGIC,MAJD,IACF,uC,uEC0BGC,MAvBK,CAChB,OAAU,CACN,CACI,KAAO,OACP,MAAS,IACT,UAAaF,EACb,OAAS,GAEb,CACI,KAAO,QACP,MAAS,SACT,UAAaC,EACb,OAAS,GAEb,CACI,KAAO,gBACP,MAAS,iBACT,UClBS,KACjB,MAAME,EAA2B,CAC7BC,UAAU,EACVC,SAAS,EACTC,YAAY,EACZC,aAAc,MACdC,eAAgB,GAChBC,WAAY,EACZC,gBAAiB,GACjBC,WAAY,GACZC,YAAY,GAEVC,EAAW,CACbJ,YAAa,EACbD,eAAgB,OAChBD,aAAc,MACdD,YAAY,GAhBO,EAmBSQ,mBAASX,GAnBlB,mBAmBhBY,EAnBgB,KAmBNC,EAnBM,KAqBjBC,EAAgBC,IAAW,MAAD,EACGA,EAAMC,OAA9BC,EADqB,EACrBA,KAAMC,EADe,EACfA,MAAOC,EADQ,EACRA,QACdC,EAAQ,GACW,aAAtBL,EAAMC,OAAOK,KACZD,EAAMH,GAAQE,EAEdC,EAAMH,GAAQC,EAClBL,EAAY,2BAAID,GAAaQ,KAsDjC,OACI,cAACE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,UACI,cAACH,EAAA,EAAD,CAAKI,UAAU,OAAf,SACI,cAACH,EAAA,EAAD,UACI,oBAAIG,UAAU,iBAAd,+BAGR,eAACC,EAAA,EAAD,WACI,cAACA,EAAA,EAAKL,IAAN,UACI,cAACC,EAAA,EAAD,UACI,eAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,8BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWZ,KAAK,OAAOJ,KAAK,kBAAkBC,MAAON,EAASL,gBAAiB2B,SAAUpB,WAItH,cAACc,EAAA,EAAKL,IAAN,UACI,cAACC,EAAA,EAAD,UACI,eAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,iCAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,6BACA,cAACH,EAAA,EAAKI,QAAN,CAAcX,KAAK,OAAOJ,KAAK,iBAAiBkB,YAAY,gBAAgBjB,MAAON,EAASP,eAAgB6B,SAAUpB,WAIlI,cAACc,EAAA,EAAKL,IAAN,UACI,cAACC,EAAA,EAAD,UACI,eAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,sCAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,mCACA,cAACH,EAAA,EAAKI,QAAN,CAAcX,KAAK,OAAOJ,KAAK,eAAeC,MAAON,EAASR,aAAc8B,SAAUpB,WAIlG,cAACc,EAAA,EAAKL,IAAN,UACI,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,eAACG,EAAA,EAAKC,MAAN,CAAYC,UAAU,+BAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,mCACA,eAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,SAAShB,KAAK,aAAaC,MAAON,EAASN,WAAY4B,SAAUpB,EAAlF,UACI,uCACA,wCACA,wCACA,wCACA,kDAKhB,cAACc,EAAA,EAAKL,IAAN,UACI,cAACC,EAAA,EAAD,UACI,cAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,2BAAtB,SACI,cAACF,EAAA,EAAKQ,MAAN,CAAYf,KAAK,WAAWgB,MAAM,eAAepB,KAAK,UAAUE,QAASP,EAASV,QAASgC,SAAUpB,UAIjH,cAACc,EAAA,EAAKL,IAAN,UACI,cAACC,EAAA,EAAD,UACI,cAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,8BAAtB,SACI,cAACF,EAAA,EAAKQ,MAAN,CAAYf,KAAK,WAAWgB,MAAM,mBAAmBpB,KAAK,aAAaE,QAASP,EAAST,WAAY+B,SAAUpB,UAI3H,cAACwB,EAAA,EAAD,CAAQC,QAAQ,UAAUlB,KAAK,SAASmB,QAxGtCC,IAClBA,EAAEC,iBAGF,IAAIC,EAAa/B,EAASL,gBAAgBqC,MAAM,MAAMC,KAAKC,IACvD,IAAIC,EAAMnC,EAASP,eAAe2C,QAAQ,IAAIC,OAAOrC,EAASR,aAAc,KAAM0C,GAGlF,OAFwB,IAArBlC,EAASV,UACR6C,EAAMA,EAAIG,eACPH,KAGX,GAAqC,IAAlCI,SAASvC,EAASN,YAAkB,CACnC8C,QAAQC,IAAIzC,EAASN,YACrB,IAAIgD,EAAUX,EAAWA,EAAWY,OAAQ,GAC5CD,EAAUA,EAAQE,MAAM,EAAG5C,EAASN,YACpCqC,EAAWA,EAAWY,OAAQ,GAAKD,EAGvC,MAAMlC,EAAQ,CACVX,YAAY,EACZD,WAAYmC,GAGhB9B,EAAY,2BAAID,GAAaQ,KAiFb,oBACA,cAACkB,EAAA,EAAD,CAAQC,QAAQ,UAAUZ,UAAU,OAAOa,QAlH3C,KAChB3B,EAAYb,IAiHI,mBACA,cAACsC,EAAA,EAAD,CAAQC,QAAQ,UAAUZ,UAAU,cAAca,QA/GpD,KACd3B,EAAY,2BAAID,GAAaF,KA8Gb,uBAIR,cAACc,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACMd,EAASJ,WAAW+C,OAAS,GAC3B,qCACI,cAAChC,EAAA,EAAD,CAAKI,UAAU,8BAAf,SACI,eAACH,EAAA,EAAD,WACI,oBAAIG,UAAU,kDAAd,oBAGA,cAAC8B,EAAA,EAAD,CACIC,UAAU,MACVC,MAAO,CAAEC,KAAM,IAAKC,KAAM,KAC1BC,QAtFZC,GACpB,cAACC,EAAA,EAAD,2BAAaD,GAAb,aACKnD,EAASH,WAAY,SAAW,uBAiFT,SAKI,cAAC6B,EAAA,EAAD,CAAQX,UAAU,mCAAmCa,QAjG3D,KAC1B,MAAMyB,EAAWrD,EAAST,WAAcS,EAASJ,WAAW0D,KAAK,IAAMtD,EAASJ,WAAW0D,KAAK,MAChGd,QAAQC,IAAIY,GACZE,UAAUC,UAAUC,UAAUJ,GAASK,MAAMC,IACzC1D,EAAY,2BAAID,GAAL,IAAeH,YAAY,QAExC+D,OAAMC,IAAUrB,QAAQC,IAAIoB,OA2FE,SACK7D,EAASH,WAAY,cAAC,IAAD,IAAc,cAAC,IAAD,aAKpD,cAACc,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACKZ,EAASJ,WAAWqC,KAAI,CAAC6B,EAAMC,KAC5B,MAAMC,EAAK,gBAAYD,GACvB,OAAO,mBAAGhD,UAAWf,EAAST,WAAW,iBAAiB,GAAnD,SAAoEuE,GAARE,qBD1J/F,OAAS,KEFNC,MAjBG,IAEhB,mCACI,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOxC,QAAQ,OAA1B,SACU,eAACjB,EAAA,EAAD,WACI,cAACwD,EAAA,EAAOE,MAAR,CAAcC,KAAK,QAAnB,0BAGA,cAACC,EAAA,EAAD,CAAKvD,UAAU,UAAf,SACK5B,EAAYoF,OAAOtC,KAAIuC,GAAa,cAACF,EAAA,EAAIG,KAAL,CAA+BJ,KAAMG,EAAUE,MAA/C,SAAuDF,EAAUnE,MAAlDmE,EAAUnE,iB,wBCQvEsE,MAfH,IAER,qCACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,UACGzF,EAAYoF,OAAOtC,KAAI4C,IACtBrC,QAAQC,IAAIoC,GACL,cAACC,EAAA,EAAD,CAA+BC,MAAOF,EAAaE,MAAOC,KAAMH,EAAaH,MAAOO,UAAWJ,EAAaI,WAAhGJ,EAAaxE,gBCFxB6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBnC,WACrBA,UAAUoC,cAAcC,MAAMlC,MAAKmC,IACjCA,EAAaC,kB","file":"static/js/main.91c31ab1.chunk.js","sourcesContent":["import React from 'react';\r\nconst Home = () => {\r\n    return(<h1>Home Component</h1>);\r\n}\r\nexport default Home;","import React from 'react';\r\nconst About = () => {\r\n    return (<h1>About</h1>)\r\n}\r\n\r\nexport default About; ","// import StringSubTool from '../components/stringSubTool';\r\nimport Home from '../components/Home';\r\nimport About from '../components/About'; \r\nimport StringSubber from '../components/StringSubber'; \r\n\r\nconst RoutingInfo = {\r\n    \"routes\": [\r\n        {\r\n            \"name\":\"Home\",\r\n            \"route\": \"/\",\r\n            \"component\": Home,\r\n            \"exact\": true   \r\n        },\r\n        {\r\n            \"name\":\"About\",\r\n            \"route\": \"/about\",\r\n            \"component\": About,\r\n            \"exact\": false\r\n        },\r\n        {\r\n            \"name\":\"String Subber\",\r\n            \"route\": \"/string-subber\",\r\n            \"component\": StringSubber,\r\n            \"exact\": false\r\n        }\r\n    ]\r\n}\r\n\r\nexport default RoutingInfo; ","import React, {useState} from 'react';\r\nimport {Container,Row, Col, Form, Button, OverlayTrigger, Tooltip} from 'react-bootstrap';\r\nimport {FaCopy, FaCheck} from 'react-icons/fa';\r\n\r\nconst StringSubber = () => {\r\n    const stringSubberInitialState = {\r\n        collapse: false,\r\n        toLower: false,\r\n        allOneLine: false,\r\n        symbolToTrim: \"###\",\r\n        templateString: \"\",\r\n        charToTrim: 0,\r\n        unformattedList: \"\",\r\n        masterList: [],\r\n        haveCopied: false\r\n    }\r\n    const cslState = {\r\n        charToTrim: -1,\r\n        templateString: \"###,\",\r\n        symbolToTrim: \"###\",\r\n        allOneLine: true\r\n    }\r\n\r\n    const [appState, setAppState] = useState(stringSubberInitialState);\r\n\r\n    const handleChange = (event) => {\r\n        const {name, value, checked} = event.target;\r\n        const delta = {};\r\n        if(event.target.type === 'checkbox')\r\n            delta[name] = checked;\r\n        else\r\n            delta[name] = value;\r\n        setAppState({...appState, ...delta});\r\n    }\r\n\r\n    const handleClear = () => {\r\n        setAppState(stringSubberInitialState);\r\n    }\r\n\r\n    const handleCSL = () => {\r\n        setAppState({...appState, ...cslState});\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n\r\n        //parse list\r\n        let stringList = appState.unformattedList.split('\\n').map( substr => {\r\n            let str = appState.templateString.replace(new RegExp(appState.symbolToTrim, 'g'), substr);\r\n            if(appState.toLower === true)\r\n                str = str.toLowerCase(); \r\n            return str;\r\n        });\r\n\r\n        if(parseInt(appState.charToTrim) !== 0){\r\n            console.log(appState.charToTrim);\r\n            let laststr = stringList[stringList.length -1];\r\n            laststr = laststr.slice(0, appState.charToTrim);\r\n            stringList[stringList.length -1] = laststr;\r\n        }\r\n\r\n        const delta = {\r\n            haveCopied: false, \r\n            masterList: stringList\r\n        }\r\n\r\n        setAppState({...appState, ...delta});\r\n    }\r\n\r\n    const handleCopyToClipBoard = () => {\r\n        const toWrite = (appState.allOneLine) ? appState.masterList.join('') : appState.masterList.join('\\n');\r\n        console.log(toWrite);\r\n        navigator.clipboard.writeText(toWrite).then( r => {\r\n            setAppState({...appState, haveCopied: true});\r\n        }\r\n        ).catch(error => {console.log(error);});\r\n    }\r\n\r\n    const ClipboardHover = (props) => (\r\n        <Tooltip {...props} >\r\n            {appState.haveCopied? 'Copied' : 'Copy To Clipboard'}\r\n        </Tooltip>\r\n    )\r\n    \r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <Row className='mt-2'>\r\n                        <Col>\r\n                            <h1 className='text-secondary'>String Subber</h1>\r\n                        </Col>\r\n                    </Row>       \r\n                    <Form>\r\n                        <Form.Row>\r\n                            <Col>\r\n                                <Form.Group controlId='stringSubberForm.UnfListInput'>\r\n                                    <Form.Label>Unformated List</Form.Label>\r\n                                    <Form.Control as='textarea' type='text' name='unformattedList' value={appState.unformattedList} onChange={handleChange} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Col>\r\n                                <Form.Group controlId='stringSubberForm.ReplaceString'>\r\n                                    <Form.Label>Replace String</Form.Label>\r\n                                    <Form.Control type='text' name='templateString' placeholder='To Substitute' value={appState.templateString} onChange={handleChange} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Col>\r\n                                <Form.Group controlId='stringSubberForm.SymbolToSubstitute'>\r\n                                    <Form.Label>Symbol To Substitute</Form.Label>\r\n                                    <Form.Control type='text' name='symbolToTrim' value={appState.symbolToTrim} onChange={handleChange} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Col xs={2}>\r\n                                <Form.Group controlId='stringSubberForm.CharsToTrim'>\r\n                                    <Form.Label>String To Substitute</Form.Label>\r\n                                    <Form.Control as='select' name='charToTrim' value={appState.charToTrim} onChange={handleChange} >\r\n                                        <option>0</option>\r\n                                        <option>-1</option>\r\n                                        <option>-2</option>\r\n                                        <option>-3</option>\r\n                                        <option>-4</option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Col>\r\n                                <Form.Group controlId='stringSubberForm.ToLower'>\r\n                                    <Form.Check type='checkbox' label=\"To Lowercase\" name='toLower' checked={appState.toLower} onChange={handleChange} />    \r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Col>\r\n                                <Form.Group controlId='stringSubberForm.AllOneLine'>\r\n                                    <Form.Check type='checkbox' label=\"Output on 1 Line\" name='allOneLine' checked={appState.allOneLine} onChange={handleChange} />    \r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n                        <Button variant='primary' type='submit' onClick={handleSubmit}>Submit</Button>\r\n                        <Button variant='primary' className='ml-2' onClick={handleClear}>Clear</Button>\r\n                        <Button variant='primary' className='float-right' onClick={handleCSL}>CSL</Button>\r\n\r\n                    </Form>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    { appState.masterList.length > 0 && \r\n                        <>\r\n                            <Row className=\"mt-4 justify-content-center\">\r\n                                <Col>\r\n                                    <h2 className='text-secondary align-middle mb-0 d-inline-block'>\r\n                                        Output\r\n                                    </h2>\r\n                                    <OverlayTrigger\r\n                                        placement=\"top\"\r\n                                        delay={{ show: 250, hide: 400 }}\r\n                                        overlay={ClipboardHover}\r\n                                    >\r\n                                        <Button className='ml-2 align-middle d-inline-block' onClick={handleCopyToClipBoard}>\r\n                                            {appState.haveCopied? <FaCheck /> : <FaCopy />}\r\n                                        </Button>\r\n                                    </OverlayTrigger>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {appState.masterList.map((entry,i) => { \r\n                                        const spKey = `output${i}`;\r\n                                        return(<p className={appState.allOneLine?'d-inline-block':''} key={spKey}>{entry}</p>)\r\n                                    })}\r\n                                </Col>\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StringSubber;","import React from 'react'; \r\nimport {Navbar, Nav, Container} from 'react-bootstrap'; \r\nimport RoutingInfo from '../routing/routeConfig';\r\n\r\nconst HeaderNav = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t    <Navbar bg='dark' variant='dark'>\r\n                <Container>\r\n                    <Navbar.Brand href=\"#home\">\r\n                        The Toolshed\r\n                    </Navbar.Brand>\r\n                    <Nav className=\"mr-auto\">\r\n                        {RoutingInfo.routes.map(siteEntry => <Nav.Link key={siteEntry.name} href={siteEntry.route}>{siteEntry.name}</Nav.Link>)}\r\n                    </Nav>\r\n                </Container>\r\n\t\t\t</Navbar>\r\n\t\t</>\r\n    );\r\n}\r\n\r\nexport default HeaderNav; ","import React from 'react';\r\nimport './App.css';\r\nimport HeaderNav from './components/HeaderNav';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport RoutingInfo from './routing/routeConfig';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <HeaderNav />\r\n      <Router>\r\n        <Switch>\r\n          {RoutingInfo.routes.map(sitemapEntry => {\r\n            console.log(sitemapEntry);\r\n            return <Route key={sitemapEntry.name} exact={sitemapEntry.exact} path={sitemapEntry.route} component={sitemapEntry.component} />})}\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}