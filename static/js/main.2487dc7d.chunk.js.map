{"version":3,"sources":["logo.svg","Components/stringSubTool.js","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Output","props","list","length","react_default","a","createElement","map","str","className","inline","StringSubTool","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","handleSubmit","handleChange","state","collapse","toLower","allOneLine","symbolToTrim","templateString","charToTrim","subList","masterList","setState","e","_this2","preventDefault","stringList","split","substr","replace","RegExp","toLowerCase","parseInt","console","log","laststr","slice","change","val","target","value","checked","name","Container","Button","color","onClick","style","marginBottom","Collapse","isOpen","Card","CardHeader","tag","CardBody","Row","Col","sm","Form","Label","for","Input","type","id","onChange","defaultValue","FormGroup","check","Component","AppRouter","HashRouter","fluid","noGutters","Nav","vertical","NavItem","NavLink","Link","to","defaultDomain","Route","path","exact","component","App","src_AppRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2487dc7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport './stringSubTool.css';\r\nimport './utils.css';\r\nimport {Container, Col, Row, Label,Button, Collapse, Card, CardBody, CardHeader, Form, Input, FormGroup} from 'reactstrap'\r\n\r\nfunction Output(props){\r\n    if(props.list.length > 0){\r\n        return (\r\n            <div>\r\n                <h3>Output</h3>\r\n                {props.list.map( str => {\r\n                    return(\r\n                         <p className={props.inline?\"inline\": \"\"}>{str}</p>\r\n                    ); \r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n    return null; \r\n}\r\n\r\nclass StringSubTool extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = { \r\n            collapse: false, \r\n        //     self.input_file = input_file\r\n        // self.output_file = output_file\r\n        // self.symbol_to_replace = symbol_to_replace\r\n        // self.url_string = url_string\r\n        // self.trim_end = trim_end\r\n        // self.all_one_line = all_one_line\r\n        // self.to_lower = to_lower\r\n            toLower: false,\r\n            allOneLine: false,\r\n            symbolToTrim: \"###\",\r\n            templateString: \"\",\r\n            charToTrim: 0,\r\n            subList: \"\",\r\n            masterList: []\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ collapse: !this.state.collapse });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault(); \r\n\r\n        //parse list\r\n        let stringList = this.state.subList.split('\\n').map( substr => {\r\n            let str = this.state.templateString.replace(new RegExp(this.state.symbolToTrim, 'g'), substr);\r\n            if(this.state.toLower === true)\r\n                str = str.toLowerCase(); \r\n            return str;\r\n        });\r\n\r\n        if(parseInt(this.state.charToTrim) !== 0){\r\n            console.log(this.state.charToTrim);\r\n            let laststr = stringList[stringList.length -1];\r\n            laststr = laststr.slice(0, this.state.charToTrim);\r\n            stringList[stringList.length -1] = laststr;\r\n        }\r\n\r\n        this.setState({masterList: stringList});\r\n    }\r\n\r\n    handleChange(e){\r\n        let change={};\r\n        let val = e.target.value; \r\n        if(e.target.value === \"on\")\r\n            val = e.target.checked; \r\n        \r\n\r\n        console.log(e.target.value);\r\n        change[e.target.name] = val;\r\n        this.setState(change);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n        <Container className=\"string-sub-tool text-left\">\r\n            <h2 className=\"tool-header\">String Substitution Tool</h2>   \r\n            <Button color=\"primary\" onClick={this.toggle} style={{ marginBottom: '1rem' }}>Help</Button>\r\n            <Collapse isOpen={this.state.collapse} className=\"mb-4\">\r\n                <Card className=\"help-section border\">\r\n                    <CardHeader tag=\"h2\" className=\"color-primary\">How To Use</CardHeader>\r\n                    <CardBody>This is example text will replace later</CardBody>  \r\n                </Card>\r\n            </Collapse>\r\n            \r\n            <Row>\r\n                <Col sm=\"6\">\r\n                    <Form>\r\n                        <Label for=\"listInput\">List Input</Label>\r\n                        <Input type=\"textarea\" id=\"listInput\" name=\"subList\" onChange={this.handleChange}></Input>\r\n        \r\n                        <Label for=\"replaceSting\">String to Substitute</Label>\r\n                        <Input type=\"text\" id=\"replaceSting\" name=\"templateString\" onChange={this.handleChange}></Input>\r\n        \r\n                        <Label for=\"subSymbol\">Symbol to Substitute</Label>\r\n                        <Input type=\"text\" id=\"subSymbol\" defaultValue=\"###\" name=\"symbolToTrim\" onChange={this.handleChange}></Input>\r\n        \r\n                        <Label for=\"trimString\">Characters to Trim</Label>\r\n                        <Input type=\"select\" id=\"trimString\" name=\"charToTrim\" onChange={this.handleChange}>\r\n                            <option>0</option>\r\n                            <option>-1</option>\r\n                            <option>-2</option>\r\n                            <option>-3</option>\r\n                            <option>-4</option>\r\n                        </Input>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input type=\"checkbox\" name=\"toLower\" onChange={this.handleChange}/> To Lower\r\n                            </Label>\r\n                        </FormGroup>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input type=\"checkbox\" name=\"allOneLine\" onChange={this.handleChange}/> Output on 1 line\r\n                            </Label>\r\n                        </FormGroup>\r\n                        <Button className=\"form-button\" color=\"primary\" onClick={this.handleSubmit}>Submit</Button>\r\n                    </Form>\r\n                </Col>\r\n                <Col sm=\"6\">\r\n                    <Output list={this.state.masterList} inline={this.state.allOneLine}/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringSubTool;\r\n","import  React from \"react\";\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport {Col, Row, Container, Nav, NavItem, NavLink} from \"reactstrap\";\r\nimport StringSubTool from \"./Components/stringSubTool\";\r\nimport \"./Components/sidenav.css\";\r\n\r\nconst defaultDomain = \"/toolshed/\"\r\nconst stringSubPath = defaultDomain + \"string_substitution\";\r\n\r\nconst AppRouter = () => (\r\n\t<Router>\r\n\t\t<Container fluid>\r\n\t\t\t<Row noGutters>\r\n\t\t\t\t<Col sm=\"2\" >\r\n\t\t\t\t\t<Nav vertical className=\"sidenav\">\r\n\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t<NavLink>\r\n\t\t\t\t\t\t\t\t<Link to={stringSubPath}>String Sub</Link>\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t</Nav>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"10\">\r\n\t\t\t\t\t\t<Route path={stringSubPath} exact component={StringSubTool} />\t\t\t\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n\t</Router>\r\n  \r\n);\r\n\r\nexport default AppRouter;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Button } from 'reactstrap';\r\nimport AppRouter from './AppRouter';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AppRouter/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}